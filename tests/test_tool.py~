

from typing import Optional, Literal, TypedDict
from langgraph.types import Command
from langgraph.graph import START,END
from langchain_core.messages import ToolCall, HumanMessage,AIMessage, ToolMessage
from langgraph.prebuilt import ToolNode
# get all tools
# tool defined by "@tool"
from my_codeact.tools.jupyter_tool import JUPYTER_TOOLS
tools = JUPYTER_TOOLS
tool_node = ToolNode(tools)
from my_codeact.utils.prompt_builder import build_system_prompt

from langgraph.prebuilt import create_react_agent

class AgentState(TypeDict):
    messages: Annotated[list[AnyMessage], add_messages]
    current_tool_calls: Optional[ToolCall]
    last_observation: Optional[str] 
#    reflection: Optional[str]

    code: Optional[str]
    exec_result: Optional[str]


def call_model(state: AgentState) -> Command[Literal["tool_executor", END]]:
    
    messages = state["messages"]

    llm = init_chat_model("ollama:qwen3:32b")

    prompt: str = build_system_promp()
    response: AIMessage = llm.invoke([HumanMessage(content=prompt)])
    tool_calls: Optional[list[ToolCall]] = response.tool_calls

    if tool_calls:
        # goto tool node

        return Command(
            update={
                "messages": response,
                "current_tool_calls": tool_calls
            },
            goto="tool_executor"
        )
    else:
        # to end
        return Command(
            update={
                "messages": response,
            },
            goto=END
        )
    
def tool_executor(state: AgentState) -> Command[]:
    messages = state["messages"]
    # latest msgs are tool call
    tool_calls = state["current_tool_calls"]
    observation = [] # also could be reflection
    if not tool_calls:
        return Command(
            goto="call_model"
        )
    # execute the tools
    for tool_call in tool_calls:
        result: ToolMessage = tool_node.invoke(tool_call)
        observation.append(result)


    return Command(
        update={
            "messages": observation,
            "current_tool_calls": None,
            "last_observation": observation[-1].content if observation else None
            },
            goto="call_model"
        )


from langgraph.graph import StateGraph

agent = StateGraph(AgentState)
agent.add_node("call_model",call_model)
agent.add_node("tool_executor", tool_executor)

agent.set_entry_point("call_model")

app = agent.compile()







    
